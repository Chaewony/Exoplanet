////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////

/////////////
// DEFINES //
/////////////
#define NUM_LIGHTS 4

/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
    float3 lightDirection;
    float specularPower;
    float4 specularColor;
};

cbuffer LSettingBuffer
{
	int isAmbient;
	int isDiffuse;
    int isSpecular;
	int padding1;
};

cbuffer LightColorBuffer
{
	float4 spotDiffuseColor[NUM_LIGHTS];
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;

	float3 lightPos1 : TEXCOORD3;
	float3 lightPos2 : TEXCOORD4;
	float3 lightPos3 : TEXCOORD5;
	float3 lightPos4 : TEXCOORD6;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float3 reflection;
    float4 specular;

	float lightIntensity1, lightIntensity2, lightIntensity3, lightIntensity4;
	float4 color1, color2, color3, color4;

	// Calculate the different amounts of light on this pixel based on the positions of the lights.
	lightIntensity1 = saturate(dot(input.normal, input.lightPos1));
	lightIntensity2 = saturate(dot(input.normal, input.lightPos2));
	lightIntensity3 = saturate(dot(input.normal, input.lightPos3));
	lightIntensity4 = saturate(dot(input.normal, input.lightPos4));
	
	// Determine the diffuse color amount of each of the four lights.
	color1 = spotDiffuseColor[0] * lightIntensity1;
	color2 = spotDiffuseColor[1] * lightIntensity2;
	color3 = spotDiffuseColor[2] * lightIntensity3;
	color4 = spotDiffuseColor[3] * lightIntensity4;


	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	textureColor = shaderTexture.Sample(SampleType, input.tex);

	// Multiply the texture pixel by the combination of all four light colors to get the final result.
	color = saturate(color1 + color2 + color3 + color4) * textureColor;

	// Set the default output color to the ambient light value for all pixels.
	if(isAmbient)
		color = ambientColor;
	else
		color = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// Initialize the specular color.
	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));

	

	if(lightIntensity > 0.0f)
	{
		if(isDiffuse)
			color += (diffuseColor * lightIntensity);

		// Saturate the ambient and diffuse color.
		color = saturate(color);

		// Calculate the reflection vector based on the light intensity, normal vector, and light direction.
		reflection = normalize(2 * lightIntensity * input.normal - lightDir); 

		// Determine the amount of specular light based on the reflection vector, viewing direction, and specular power.
		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
	}

    // Multiply the texture pixel and the input color to get the textured result.
    color = color * textureColor;

	// Add the specular component last to the output color.
    if(isSpecular)
		color = saturate(color + specular);

    return color;
}